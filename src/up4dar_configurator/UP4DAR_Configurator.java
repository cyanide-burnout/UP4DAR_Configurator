/*
 * Copyright (C) 2012 Michael Dirska <dl1bff@mdx.de>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
package up4dar_configurator;

import java.beans.PropertyChangeEvent;
import java.net.InetAddress;
import java.net.SocketException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.table.TableModel;

/**
 *
 * @author Michael Dirska <dl1bff@mdx.de>
 */
public class UP4DAR_Configurator extends javax.swing.JFrame 
    implements java.beans.PropertyChangeListener
{

  

    private UP4DARbroadcastRX bcRX;

    /**
     * Get the value of bcRX
     *
     * @return the value of bcRX
     */
    public UP4DARbroadcastRX getBcRX() {
        return bcRX;
    }

    /**
     * Set the value of bcRX
     *
     * @param bcRX new value of bcRX
     */
    public void setBcRX(UP4DARbroadcastRX bcRX) {
        this.bcRX = bcRX;
    }

    
    UP4DAR_SNMP snmp;
   
    /**
     * Creates new form UP4DAR_Configurator
     */
    public UP4DAR_Configurator() {
        bcRX = new UP4DARbroadcastRX();
        try
        {
            bcRX.startThreads();
            
            bcRX.addListDataListener(new ListDataListener() {
            
                @Override
                public void intervalAdded(ListDataEvent lde)
                {
                    
                }

                @Override
                public void intervalRemoved(ListDataEvent lde)
                {
                   
                }

                @Override
                public void contentsChanged(ListDataEvent lde)
                {
                    if (bcRX.getSize() == 0)
                    {
                        connectButton.setEnabled( false );
                        boardList.clearSelection();
                    }
                }
        });
            
        } catch (SocketException ex)
        {
            Logger.getLogger(UP4DAR_Configurator.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(1);
        }
        
        snmp = null;
        
        
        initComponents();
        
        
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        networkListFrame = new javax.swing.JInternalFrame();
        boardListScrollPane = new javax.swing.JScrollPane();
        boardList = new javax.swing.JList();
        connectButton = new javax.swing.JButton();
        configFrame = new javax.swing.JInternalFrame();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        allgemeinPanel = new javax.swing.JPanel();
        callSign = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        inputVoltage = new javax.swing.JLabel();
        dvPanel = new javax.swing.JPanel();
        rptSettingsPanel = new javax.swing.JPanel();
        rptSpinner = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rptTable = new javax.swing.JTable();
        phyPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        phyTxDelay = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        phyTxGain = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        phyRxInv = new javax.swing.JCheckBox();
        phyTxDcShift = new javax.swing.JTextField();
        phySoftwareVersion = new javax.swing.JLabel();
        audioPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        pttBeepFrequency = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        pttBeepDuration = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        pttBeepVolume = new javax.swing.JTextField();
        ExitButton = new javax.swing.JButton();
        saveToFlash = new javax.swing.JButton();
        loadingFrame = new javax.swing.JInternalFrame();
        loadProgressBar = new javax.swing.JProgressBar();
        loadProgressLabel = new javax.swing.JLabel();
        loadCancelButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UP4DAR Configurator");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(900, 700));

        networkListFrame.setTitle("UP4DAR boards on the local network");
        networkListFrame.setVisible(true);

        boardListScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        boardListScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        boardList.setModel(bcRX);
        boardList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        boardList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                boardListValueChanged(evt);
            }
        });
        boardListScrollPane.setViewportView(boardList);

        connectButton.setText("Connect");
        connectButton.setEnabled(false);
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout networkListFrameLayout = new javax.swing.GroupLayout(networkListFrame.getContentPane());
        networkListFrame.getContentPane().setLayout(networkListFrameLayout);
        networkListFrameLayout.setHorizontalGroup(
            networkListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(networkListFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(networkListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boardListScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, networkListFrameLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(connectButton)))
                .addContainerGap())
        );
        networkListFrameLayout.setVerticalGroup(
            networkListFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(networkListFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(boardListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectButton)
                .addContainerGap())
        );

        networkListFrame.setBounds(10, 10, 320, 130);
        desktopPane.add(networkListFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

        configFrame.setNormalBounds(new java.awt.Rectangle(10, 15, 880, 590));
        configFrame.setVisible(false);

        callSign.setText("NOCALL");
        callSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callSignActionPerformed(evt);
            }
        });
        callSign.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                callSignFocusLost(evt);
            }
        });

        jLabel1.setText("Rufzeichen");

        jLabel2.setText("Eingangsspannung");

        inputVoltage.setText("voltage");

        javax.swing.GroupLayout allgemeinPanelLayout = new javax.swing.GroupLayout(allgemeinPanel);
        allgemeinPanel.setLayout(allgemeinPanelLayout);
        allgemeinPanelLayout.setHorizontalGroup(
            allgemeinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allgemeinPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(allgemeinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(allgemeinPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(callSign, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(allgemeinPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(inputVoltage)))
                .addContainerGap(707, Short.MAX_VALUE))
        );
        allgemeinPanelLayout.setVerticalGroup(
            allgemeinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allgemeinPanelLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(allgemeinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(inputVoltage))
                .addGap(62, 62, 62)
                .addGroup(allgemeinPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(callSign, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(386, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("allgemein", allgemeinPanel);

        rptSettingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Repeater"));

        rptSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 5, 1));
        rptSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rptSpinnerStateChanged(evt);
            }
        });

        jLabel9.setText("Use this repeater setting:");

        rptTable.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        rptTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(1), "DB0DF  B", "DB0DF  G"},
                { new Integer(2), "DB0DOS B", "DB0DOS G"},
                { new Integer(3), null, null},
                { new Integer(4), null, null},
                { new Integer(5), null, null}
            },
            new String [] {
                "#", "RPT1", "RPT2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        rptTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(rptTable);
        rptTable.getColumnModel().getColumn(0).setResizable(false);
        rptTable.getColumnModel().getColumn(0).setPreferredWidth(8);

        javax.swing.GroupLayout rptSettingsPanelLayout = new javax.swing.GroupLayout(rptSettingsPanel);
        rptSettingsPanel.setLayout(rptSettingsPanelLayout);
        rptSettingsPanelLayout.setHorizontalGroup(
            rptSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rptSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rptSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rptSettingsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(rptSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        rptSettingsPanelLayout.setVerticalGroup(
            rptSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rptSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rptSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(rptSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout dvPanelLayout = new javax.swing.GroupLayout(dvPanel);
        dvPanel.setLayout(dvPanelLayout);
        dvPanelLayout.setHorizontalGroup(
            dvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dvPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rptSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(592, Short.MAX_VALUE))
        );
        dvPanelLayout.setVerticalGroup(
            dvPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dvPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rptSettingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(321, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("DV", dvPanel);

        jLabel3.setText("TxDelay");

        phyTxDelay.setText("jTextField1");
        phyTxDelay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phyTxDelayActionPerformed(evt);
            }
        });
        phyTxDelay.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                phyTxDelayFocusLost(evt);
            }
        });

        jLabel4.setText("TxGain");

        phyTxGain.setText("jTextField1");
        phyTxGain.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phyTxGainActionPerformed(evt);
            }
        });
        phyTxGain.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                phyTxGainFocusLost(evt);
            }
        });

        jLabel5.setText("TxDcShift");

        phyRxInv.setText("RxInv");
        phyRxInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phyRxInvActionPerformed(evt);
            }
        });

        phyTxDcShift.setText("jTextField1");
        phyTxDcShift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phyTxDcShiftActionPerformed(evt);
            }
        });
        phyTxDcShift.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                phyTxDcShiftFocusLost(evt);
            }
        });

        phySoftwareVersion.setText("jLabel6");

        javax.swing.GroupLayout phyPanelLayout = new javax.swing.GroupLayout(phyPanel);
        phyPanel.setLayout(phyPanelLayout);
        phyPanelLayout.setHorizontalGroup(
            phyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(phyPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(phyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(phySoftwareVersion)
                    .addComponent(phyRxInv)
                    .addGroup(phyPanelLayout.createSequentialGroup()
                        .addGroup(phyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(21, 21, 21)
                        .addGroup(phyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(phyTxGain, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phyTxDelay, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phyTxDcShift, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(691, Short.MAX_VALUE))
        );
        phyPanelLayout.setVerticalGroup(
            phyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(phyPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(phyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(phyTxDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(phyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(phyTxGain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(phyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phyTxDcShift, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(phyRxInv)
                .addGap(42, 42, 42)
                .addComponent(phySoftwareVersion)
                .addContainerGap(298, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("PHY", phyPanel);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("PTT Beep"));

        jLabel6.setText("Frequency");

        pttBeepFrequency.setText("jTextField1");
        pttBeepFrequency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pttBeepFrequencyActionPerformed(evt);
            }
        });
        pttBeepFrequency.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pttBeepFrequencyFocusLost(evt);
            }
        });

        jLabel7.setText("Duration");

        pttBeepDuration.setText("jTextField1");
        pttBeepDuration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pttBeepDurationActionPerformed(evt);
            }
        });
        pttBeepDuration.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pttBeepDurationFocusLost(evt);
            }
        });

        jLabel8.setText("Volume");

        pttBeepVolume.setText("jTextField2");
        pttBeepVolume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pttBeepVolumeActionPerformed(evt);
            }
        });
        pttBeepVolume.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pttBeepVolumeFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pttBeepDuration, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                    .addComponent(pttBeepFrequency, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pttBeepVolume))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pttBeepFrequency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pttBeepDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(pttBeepVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout audioPanelLayout = new javax.swing.GroupLayout(audioPanel);
        audioPanel.setLayout(audioPanelLayout);
        audioPanelLayout.setHorizontalGroup(
            audioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(audioPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(681, Short.MAX_VALUE))
        );
        audioPanelLayout.setVerticalGroup(
            audioPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(audioPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(384, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Audio", audioPanel);

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        saveToFlash.setText("Save to Flash Memory");
        saveToFlash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToFlashActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout configFrameLayout = new javax.swing.GroupLayout(configFrame.getContentPane());
        configFrame.getContentPane().setLayout(configFrameLayout);
        configFrameLayout.setHorizontalGroup(
            configFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
            .addGroup(configFrameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(saveToFlash)
                .addGap(18, 18, 18)
                .addComponent(ExitButton)
                .addContainerGap())
        );
        configFrameLayout.setVerticalGroup(
            configFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configFrameLayout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(configFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExitButton)
                    .addComponent(saveToFlash))
                .addGap(6, 6, 6))
        );

        configFrame.setBounds(10, 15, 880, 590);
        desktopPane.add(configFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

        loadingFrame.setVisible(false);

        loadProgressLabel.setText("jLabel2");

        loadCancelButton.setText("Cancel");

        javax.swing.GroupLayout loadingFrameLayout = new javax.swing.GroupLayout(loadingFrame.getContentPane());
        loadingFrame.getContentPane().setLayout(loadingFrameLayout);
        loadingFrameLayout.setHorizontalGroup(
            loadingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadingFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(loadingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loadingFrameLayout.createSequentialGroup()
                        .addComponent(loadProgressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 120, Short.MAX_VALUE))
                    .addComponent(loadProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loadingFrameLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(loadCancelButton)))
                .addContainerGap())
        );
        loadingFrameLayout.setVerticalGroup(
            loadingFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loadingFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loadProgressLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadCancelButton)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        loadingFrame.setBounds(200, 200, 340, 120);
        desktopPane.add(loadingFrame, javax.swing.JLayeredPane.DEFAULT_LAYER);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.setEnabled(false);
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.setEnabled(false);
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.setEnabled(false);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        cutMenuItem.setEnabled(false);
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        copyMenuItem.setEnabled(false);
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        pasteMenuItem.setEnabled(false);
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        deleteMenuItem.setEnabled(false);
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Contents");
        contentMenuItem.setEnabled(false);
        contentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.setEnabled(false);
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 941, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 788, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void contentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contentMenuItemActionPerformed

    private void boardListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_boardListValueChanged
        connectButton.setEnabled( boardList.getSelectedIndex() >= 0 );
    }//GEN-LAST:event_boardListValueChanged

    private void callSignActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_callSignActionPerformed
    {//GEN-HEADEREND:event_callSignActionPerformed
        try
        {
            snmp.snmpSetString("30", callSign.getText());
     
        } catch (Exception ex)
        {
            // perhaps format was wrong
        }
        
        try
        {
            callSign.setText(snmp.snmpGetString("30"));
            
        } catch (Exception ex)
        {
            Logger.getLogger(UP4DAR_Configurator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_callSignActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_connectButtonActionPerformed
    {//GEN-HEADEREND:event_connectButtonActionPerformed
        connectButton.setEnabled( false );
        
        if (boardList.getSelectedIndex() >= bcRX.getSize() )
        {
            
            boardList.clearSelection();
        }
        else
        {
            try
            {
                doConnect( bcRX.getIP(boardList.getSelectedIndex() ) );
                
            } catch (Exception ex)
            {
                Logger.getLogger(UP4DAR_Configurator.class.getName()).log(Level.SEVERE, null, ex);
                connectButton.setEnabled( true );
            }
        }
        
    }//GEN-LAST:event_connectButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ExitButtonActionPerformed
    {//GEN-HEADEREND:event_ExitButtonActionPerformed
        configFrame.setVisible(false);
        connectButton.setEnabled( false );
        boardList.clearSelection();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void phyTxDelayActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_phyTxDelayActionPerformed
    {//GEN-HEADEREND:event_phyTxDelayActionPerformed
        try
        {          
            snmp.snmpSetInteger("230", Integer.parseInt( phyTxDelay.getText()));
     
        } catch (Exception ex)
        {
            // perhaps format was wrong
        }
        
        try
        {
            phyTxDelay.setText( Integer.toString( snmp.snmpGetInteger("230") ));
                    
        } catch (Exception ex)
        {
            Logger.getLogger(UP4DAR_Configurator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_phyTxDelayActionPerformed

    private void phyRxInvActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_phyRxInvActionPerformed
    {//GEN-HEADEREND:event_phyRxInvActionPerformed
        try
        {
            int value;
            
            if (phyRxInv.isSelected())
            {
                value = 1;
            }
            else
            {
                value = 0;
            }
            
            snmp.snmpSetInteger("250", value);
     
        } catch (Exception ex)
        {
            // perhaps format was wrong
        }
        
        try
        {
            phyRxInv.setSelected(snmp.snmpGetInteger("250") == 1);
                    
        } catch (Exception ex)
        {
            Logger.getLogger(UP4DAR_Configurator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_phyRxInvActionPerformed

    private void phyTxGainActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_phyTxGainActionPerformed
    {//GEN-HEADEREND:event_phyTxGainActionPerformed
         try
        {          
            snmp.snmpSetInteger("240", Integer.parseInt( phyTxGain.getText()));
     
        } catch (Exception ex)
        {
            // perhaps format was wrong
        }
        
        try
        {
            phyTxGain.setText( Integer.toString( snmp.snmpGetInteger("240") ));
                    
        } catch (Exception ex)
        {
            Logger.getLogger(UP4DAR_Configurator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_phyTxGainActionPerformed

    private void phyTxDcShiftActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_phyTxDcShiftActionPerformed
    {//GEN-HEADEREND:event_phyTxDcShiftActionPerformed
         try
        {          
            snmp.snmpSetInteger("260", Integer.parseInt( phyTxDcShift.getText()));
     
        } catch (Exception ex)
        {
            // perhaps format was wrong
        }
        
        try
        {
            phyTxDcShift.setText( Integer.toString( snmp.snmpGetInteger("260") ));
                    
        } catch (Exception ex)
        {
            Logger.getLogger(UP4DAR_Configurator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_phyTxDcShiftActionPerformed

    private void phyTxDcShiftFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_phyTxDcShiftFocusLost
    {//GEN-HEADEREND:event_phyTxDcShiftFocusLost
        phyTxDcShiftActionPerformed(null);
    }//GEN-LAST:event_phyTxDcShiftFocusLost

    private void phyTxGainFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_phyTxGainFocusLost
    {//GEN-HEADEREND:event_phyTxGainFocusLost
        phyTxGainActionPerformed(null);
    }//GEN-LAST:event_phyTxGainFocusLost

    private void phyTxDelayFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_phyTxDelayFocusLost
    {//GEN-HEADEREND:event_phyTxDelayFocusLost
        phyTxDelayActionPerformed(null);
    }//GEN-LAST:event_phyTxDelayFocusLost

    private void callSignFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_callSignFocusLost
    {//GEN-HEADEREND:event_callSignFocusLost
        callSignActionPerformed(null);
    }//GEN-LAST:event_callSignFocusLost

    private void saveToFlashActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_saveToFlashActionPerformed
    {//GEN-HEADEREND:event_saveToFlashActionPerformed
        try
        {          
            snmp.snmpSetInteger("50", 2);
     
        } catch (Exception ex)
        {
            Logger.getLogger(UP4DAR_Configurator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveToFlashActionPerformed

    private void pttBeepFrequencyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pttBeepFrequencyActionPerformed
    {//GEN-HEADEREND:event_pttBeepFrequencyActionPerformed
        try
        {          
            snmp.snmpSetInteger("650", Integer.parseInt( pttBeepFrequency.getText()));
     
        } catch (Exception ex)
        {
            // perhaps format was wrong
        }
        
        try
        {
            pttBeepFrequency.setText( Integer.toString( snmp.snmpGetInteger("650") ));
                    
        } catch (Exception ex)
        {
            Logger.getLogger(UP4DAR_Configurator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pttBeepFrequencyActionPerformed

    private void pttBeepDurationActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pttBeepDurationActionPerformed
    {//GEN-HEADEREND:event_pttBeepDurationActionPerformed
        try
        {          
            snmp.snmpSetInteger("640", Integer.parseInt( pttBeepDuration.getText()));
     
        } catch (Exception ex)
        {
            // perhaps format was wrong
        }
        
        try
        {
            pttBeepDuration.setText( Integer.toString( snmp.snmpGetInteger("640") ));
                    
        } catch (Exception ex)
        {
            Logger.getLogger(UP4DAR_Configurator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pttBeepDurationActionPerformed

    private void pttBeepVolumeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_pttBeepVolumeActionPerformed
    {//GEN-HEADEREND:event_pttBeepVolumeActionPerformed
        try
        {          
            snmp.snmpSetInteger("660", Integer.parseInt( pttBeepVolume.getText()));
     
        } catch (Exception ex)
        {
            // perhaps format was wrong
        }
        
        try
        {
            pttBeepVolume.setText( Integer.toString( snmp.snmpGetInteger("660") ));
                    
        } catch (Exception ex)
        {
            Logger.getLogger(UP4DAR_Configurator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pttBeepVolumeActionPerformed

    private void pttBeepFrequencyFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_pttBeepFrequencyFocusLost
    {//GEN-HEADEREND:event_pttBeepFrequencyFocusLost
        pttBeepFrequencyActionPerformed(null);
    }//GEN-LAST:event_pttBeepFrequencyFocusLost

    private void pttBeepDurationFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_pttBeepDurationFocusLost
    {//GEN-HEADEREND:event_pttBeepDurationFocusLost
        pttBeepDurationActionPerformed(null);
    }//GEN-LAST:event_pttBeepDurationFocusLost

    private void pttBeepVolumeFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_pttBeepVolumeFocusLost
    {//GEN-HEADEREND:event_pttBeepVolumeFocusLost
        pttBeepVolumeActionPerformed(null);
    }//GEN-LAST:event_pttBeepVolumeFocusLost

    private void rptSpinnerStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_rptSpinnerStateChanged
    {//GEN-HEADEREND:event_rptSpinnerStateChanged
        try
        {          
            snmp.snmpSetInteger("710", (Integer) rptSpinner.getValue());
     
        } catch (Exception ex)
        {
            // perhaps format was wrong
        }
        
        try
        {
            rptSpinner.setValue(snmp.snmpGetInteger("710"));
                    
        } catch (Exception ex)
        {
            Logger.getLogger(UP4DAR_Configurator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_rptSpinnerStateChanged

    
    class Task extends SwingWorker<Void, Void> {
        
        int progress = 0;
        boolean errorOccured = false;
        
        void progIncr()
        {
            progress += 1;
            setProgress(progress);
        }
        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground()
        {
            progIncr();
            try
            {
                callSign.setText( snmp.snmpGetString("30"));
                progIncr();
               
                inputVoltage.setText( Double.toString(snmp.snmpGetInteger("40") * 0.001) + "V" );
                progIncr();
                
                phyRxInv.setSelected(snmp.snmpGetInteger("250") == 1);
                progIncr();
                
                phySoftwareVersion.setText ( snmp.snmpGetString("210") );
                progIncr();
                
                phyTxDelay.setText( Integer.toString( snmp.snmpGetInteger("230") ));
                progIncr();
                
                phyTxGain.setText( Integer.toString( snmp.snmpGetInteger("240") ));
                progIncr();
                
                phyTxDcShift.setText( Integer.toString( snmp.snmpGetInteger("260") ));
                progIncr();
                
                pttBeepDuration.setText( Integer.toString( snmp.snmpGetInteger("640") ));
                progIncr();
                
                pttBeepFrequency.setText( Integer.toString( snmp.snmpGetInteger("650") ));
                progIncr();
                
                pttBeepVolume.setText( Integer.toString( snmp.snmpGetInteger("660") ));
                progIncr();
                
                rptSpinner.setValue(snmp.snmpGetInteger("710"));
                progIncr();
                
                TableModel tm = rptTable.getModel();
                int i;
                
                for(i=0; i < 5; i++)
                {
                    tm.setValueAt( snmp.snmpGetString("7212" + (i+1)), i, 1);
                    tm.setValueAt( snmp.snmpGetString("7213" + (i+1)), i, 2);
                    progIncr();
                }
                
                
                
                
            } catch (Exception ex)
            {
                Logger.getLogger(UP4DAR_Configurator.class.getName()).log(Level.SEVERE, null, ex);
                errorOccured = true;
            }
            
            
         
            
           
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done()
        {
            // setCursor(null); //turn off the wait cursor
            loadingFrame.setVisible(false);
            if (!errorOccured)
            {
                configFrame.setVisible(true);
            }
            else
            {
                connectButton.setEnabled(true);
            }
        }
    }
    
    Task task;

    @Override
    public void propertyChange(PropertyChangeEvent evt)
    {
        if (evt.getPropertyName().equals("progress"))
        {
            int progress = (Integer) evt.getNewValue();
            loadProgressBar.setValue(progress);
        } 
    }
    
    void doConnect ( InetAddress a ) throws Exception
    {
        // System.out.println(a);
        
        snmp = new UP4DAR_SNMP(a);
        
        String h = snmp.snmpConnect();
        
       
        loadProgressBar.setValue(0);
        loadProgressLabel.setText("Loading data...");
        
        loadingFrame.setVisible(true);

        // setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      
        task = new Task();
        task.addPropertyChangeListener(this);
        task.execute();
            
       
    }
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UP4DAR_Configurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UP4DAR_Configurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UP4DAR_Configurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UP4DAR_Configurator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new UP4DAR_Configurator().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton ExitButton;
    javax.swing.JMenuItem aboutMenuItem;
    javax.swing.JPanel allgemeinPanel;
    javax.swing.JPanel audioPanel;
    javax.swing.JList boardList;
    javax.swing.JScrollPane boardListScrollPane;
    javax.swing.JTextField callSign;
    javax.swing.JInternalFrame configFrame;
    javax.swing.JButton connectButton;
    javax.swing.JMenuItem contentMenuItem;
    javax.swing.JMenuItem copyMenuItem;
    javax.swing.JMenuItem cutMenuItem;
    javax.swing.JMenuItem deleteMenuItem;
    javax.swing.JDesktopPane desktopPane;
    javax.swing.JPanel dvPanel;
    javax.swing.JMenu editMenu;
    javax.swing.JMenuItem exitMenuItem;
    javax.swing.JMenu fileMenu;
    javax.swing.JMenu helpMenu;
    javax.swing.JLabel inputVoltage;
    javax.swing.JLabel jLabel1;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel4;
    javax.swing.JLabel jLabel5;
    javax.swing.JLabel jLabel6;
    javax.swing.JLabel jLabel7;
    javax.swing.JLabel jLabel8;
    javax.swing.JLabel jLabel9;
    javax.swing.JPanel jPanel4;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JTabbedPane jTabbedPane1;
    javax.swing.JButton loadCancelButton;
    javax.swing.JProgressBar loadProgressBar;
    javax.swing.JLabel loadProgressLabel;
    javax.swing.JInternalFrame loadingFrame;
    javax.swing.JMenuBar menuBar;
    javax.swing.JInternalFrame networkListFrame;
    javax.swing.JMenuItem openMenuItem;
    javax.swing.JMenuItem pasteMenuItem;
    javax.swing.JPanel phyPanel;
    javax.swing.JCheckBox phyRxInv;
    javax.swing.JLabel phySoftwareVersion;
    javax.swing.JTextField phyTxDcShift;
    javax.swing.JTextField phyTxDelay;
    javax.swing.JTextField phyTxGain;
    javax.swing.JTextField pttBeepDuration;
    javax.swing.JTextField pttBeepFrequency;
    javax.swing.JTextField pttBeepVolume;
    javax.swing.JPanel rptSettingsPanel;
    javax.swing.JSpinner rptSpinner;
    javax.swing.JTable rptTable;
    javax.swing.JMenuItem saveAsMenuItem;
    javax.swing.JMenuItem saveMenuItem;
    javax.swing.JButton saveToFlash;
    // End of variables declaration//GEN-END:variables

    
}
